{"ast":null,"code":"var _jsxFileName = \"/Users/anshulkc/Downloads/quicken-project/quicken-blank-canvas/src/Ocr.js\",\n  _s = $RefreshSig$();\n// Ocr.js\nimport { useEffect, useRef, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Ocr = _ref => {\n  _s();\n  let {\n    file\n  } = _ref;\n  const [progress, setProgress] = useState(0);\n  const [progressLabel, setProgressLabel] = useState('');\n  const [ocrResult, setOcrResult] = useState('');\n  const workerRef = useRef(null);\n  useEffect(() => {\n    const initializeWorker = async () => {\n      workerRef.current = await createWorker({\n        logger: m => {\n          if ('progress' in m) {\n            setProgress(m.progress);\n            setProgressLabel(m.status);\n          }\n        },\n        workerPath: '/tesseract.js/worker.min.js'\n      });\n    };\n    initializeWorker();\n    return () => {\n      if (workerRef.current) {\n        workerRef.current.terminate();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (file && workerRef.current) {\n      handleExtract();\n    }\n  }, [file]);\n  const handleExtract = async () => {\n    try {\n      setProgress(0);\n      setProgressLabel('Starting OCR');\n      const worker = workerRef.current;\n      await worker.load();\n      await worker.loadLanguage('eng');\n      await worker.initialize('eng');\n      const response = await worker.recognize(file);\n      setOcrResult(response.data.text);\n      console.log('OCR Result:', response.data.text);\n    } catch (error) {\n      console.error('OCR Error:', error);\n      setProgressLabel('Error processing image');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Progress: \", Math.round(progress * 100), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Status: \", progressLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), ocrResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"OCR Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: ocrResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(Ocr, \"hHCiLSnilpIFeOyDssczhKk6ERc=\");\n_c = Ocr;\nvar _c;\n$RefreshReg$(_c, \"Ocr\");","map":{"version":3,"names":["useEffect","useRef","useState","createWorker","Ocr","file","progress","setProgress","progressLabel","setProgressLabel","ocrResult","setOcrResult","workerRef","initializeWorker","current","logger","m","status","workerPath","terminate","handleExtract","worker","load","loadLanguage","initialize","response","recognize","data","text","console","log","error","Math","round"],"sources":["/Users/anshulkc/Downloads/quicken-project/quicken-blank-canvas/src/Ocr.js"],"sourcesContent":["// Ocr.js\nimport { useEffect, useRef, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\n\nexport const Ocr = ({ file }) => {\n    const [progress, setProgress] = useState(0);\n    const [progressLabel, setProgressLabel] = useState('');\n    const [ocrResult, setOcrResult] = useState('');\n    const workerRef = useRef(null);\n\n    useEffect(() => {\n        const initializeWorker = async () => {\n            workerRef.current = await createWorker({\n                logger: m => {\n                    if ('progress' in m) {\n                        setProgress(m.progress);\n                        setProgressLabel(m.status);\n                    }\n                },\n                workerPath: '/tesseract.js/worker.min.js'\n            });\n        };\n        \n        initializeWorker();\n        \n        return () => {\n            if (workerRef.current) {\n                workerRef.current.terminate();\n            }\n        };\n    }, []);\n\n\n    useEffect(() => {\n        if (file && workerRef.current) {\n            handleExtract();\n        }\n    }, [file]);\n\n    const handleExtract = async () => {\n        try {\n            setProgress(0);\n            setProgressLabel('Starting OCR');\n\n            const worker = workerRef.current;\n            await worker.load();\n            await worker.loadLanguage('eng');\n            await worker.initialize('eng');\n\n            const response = await worker.recognize(file);\n            setOcrResult(response.data.text);\n            console.log('OCR Result:', response.data.text);\n        } catch (error) {\n            console.error('OCR Error:', error);\n            setProgressLabel('Error processing image');\n        }\n    };\n\n    return (\n        <div>\n            <div>Progress: {Math.round(progress * 100)}%</div>\n            <div>Status: {progressLabel}</div>\n            {ocrResult && (\n                <div>\n                    <h3>OCR Result:</h3>\n                    <pre>{ocrResult}</pre>\n                </div>\n            )}\n        </div>\n    );\n};\n"],"mappings":";;AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,YAAY,QAAQ,cAAc;AAAC;AAE5C,OAAO,MAAMC,GAAG,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMU,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMa,gBAAgB,GAAG,YAAY;MACjCD,SAAS,CAACE,OAAO,GAAG,MAAMX,YAAY,CAAC;QACnCY,MAAM,EAAEC,CAAC,IAAI;UACT,IAAI,UAAU,IAAIA,CAAC,EAAE;YACjBT,WAAW,CAACS,CAAC,CAACV,QAAQ,CAAC;YACvBG,gBAAgB,CAACO,CAAC,CAACC,MAAM,CAAC;UAC9B;QACJ,CAAC;QACDC,UAAU,EAAE;MAChB,CAAC,CAAC;IACN,CAAC;IAEDL,gBAAgB,EAAE;IAElB,OAAO,MAAM;MACT,IAAID,SAAS,CAACE,OAAO,EAAE;QACnBF,SAAS,CAACE,OAAO,CAACK,SAAS,EAAE;MACjC;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAGNnB,SAAS,CAAC,MAAM;IACZ,IAAIK,IAAI,IAAIO,SAAS,CAACE,OAAO,EAAE;MAC3BM,aAAa,EAAE;IACnB;EACJ,CAAC,EAAE,CAACf,IAAI,CAAC,CAAC;EAEV,MAAMe,aAAa,GAAG,YAAY;IAC9B,IAAI;MACAb,WAAW,CAAC,CAAC,CAAC;MACdE,gBAAgB,CAAC,cAAc,CAAC;MAEhC,MAAMY,MAAM,GAAGT,SAAS,CAACE,OAAO;MAChC,MAAMO,MAAM,CAACC,IAAI,EAAE;MACnB,MAAMD,MAAM,CAACE,YAAY,CAAC,KAAK,CAAC;MAChC,MAAMF,MAAM,CAACG,UAAU,CAAC,KAAK,CAAC;MAE9B,MAAMC,QAAQ,GAAG,MAAMJ,MAAM,CAACK,SAAS,CAACrB,IAAI,CAAC;MAC7CM,YAAY,CAACc,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC;MAChCC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEL,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC;IAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCtB,gBAAgB,CAAC,wBAAwB,CAAC;IAC9C;EACJ,CAAC;EAED,oBACI;IAAA,wBACI;MAAA,WAAK,YAAU,EAACuB,IAAI,CAACC,KAAK,CAAC3B,QAAQ,GAAG,GAAG,CAAC,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eAClD;MAAA,WAAK,UAAQ,EAACE,aAAa;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,EACjCE,SAAS,iBACN;MAAA,wBACI;QAAA,UAAI;MAAW;QAAA;QAAA;QAAA;MAAA,QAAK,eACpB;QAAA,UAAMA;MAAS;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAE7B;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GAlEWN,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
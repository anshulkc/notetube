{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\nconst Ocr = () => {\n  _s();\n  const [imageData, setImageData] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [OcrResult, setOcrResult] = useState('');\n  const loadFile = file => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const imageDataUri = reader.result;\n      setImageData(String(imageDataUri));\n    };\n    reader.readAsDataURL(file);\n  };\n  const workerRef = useRef(null);\n  useEffect(async () => {\n    workerRef.current = await createWorker({\n      logger: message => {\n        if ('progress' in message) {\n          setProgress(message.progress);\n          setProgressLabel(message.progress == 1 ? 'Done' : message.status);\n        }\n      }\n    });\n    return async () => {\n      await workerRef.current.terminate();\n      workerRef.current = null;\n    };\n  }, []);\n  const handleExtract = async () => {\n    setProgress(0);\n    setProgressLabel('starting');\n    const worker = workerRef.current;\n    await worker.load();\n    await worker.loadLangauge('eng');\n    await worker.initialize('eng');\n    const response = await worker.recognize(imageData);\n    setOcrResult(response.data.text);\n    console.log(ocrResult);\n  };\n};\n_s(Ocr, \"zMOb0jCef0kvRH1GK04m9VZiP/8=\");\n_c = Ocr;\nvar _c;\n$RefreshReg$(_c, \"Ocr\");","map":{"version":3,"names":["useEffect","useRef","useState","createWorker","Ocr","imageData","setImageData","progress","setProgress","OcrResult","setOcrResult","loadFile","file","reader","FileReader","onloadend","imageDataUri","result","String","readAsDataURL","workerRef","current","logger","message","setProgressLabel","status","terminate","handleExtract","worker","load","loadLangauge","initialize","response","recognize","data","text","console","log","ocrResult"],"sources":["/Users/anshulkc/Downloads/quicken-project/quicken-blank-canvas/src/Ocr.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\n\nconst Ocr = () => {\n    const [imageData, setImageData] = useState('');\n    const [progress, setProgress] = useState(0);\n    const [OcrResult, setOcrResult] = useState('');\n    const loadFile = (file) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const imageDataUri = reader.result;\n            setImageData(String(imageDataUri))\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const workerRef = useRef(null);\n    useEffect(async () => {\n        workerRef.current = await createWorker({\n            logger: message => {\n                if ('progress' in message) {\n                    setProgress(message.progress);\n                    setProgressLabel(message.progress == 1 ? 'Done' : message.status);\n                }\n            }\n        });\n        return async () => {\n            await workerRef.current.terminate();\n            workerRef.current = null;\n        }\n    }, []);\n\n    const handleExtract = async () => {\n        setProgress(0);\n        setProgressLabel('starting');\n\n        const worker = workerRef.current;\n        await worker.load();\n        await worker.loadLangauge('eng');\n        await worker.initialize('eng');\n\n        const response = await worker.recognize(imageData);\n        setOcrResult(response.data.text)\n\n        console.log(ocrResult);\n\n    };\n\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,YAAY,QAAQ,cAAc;AAE3C,MAAMC,GAAG,GAAG,MAAM;EAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMS,QAAQ,GAAIC,IAAI,IAAK;IACvB,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;MACrB,MAAMC,YAAY,GAAGH,MAAM,CAACI,MAAM;MAClCX,YAAY,CAACY,MAAM,CAACF,YAAY,CAAC,CAAC;IACtC,CAAC;IACDH,MAAM,CAACM,aAAa,CAACP,IAAI,CAAC;EAC9B,CAAC;EAED,MAAMQ,SAAS,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAC9BD,SAAS,CAAC,YAAY;IAClBoB,SAAS,CAACC,OAAO,GAAG,MAAMlB,YAAY,CAAC;MACnCmB,MAAM,EAAEC,OAAO,IAAI;QACf,IAAI,UAAU,IAAIA,OAAO,EAAE;UACvBf,WAAW,CAACe,OAAO,CAAChB,QAAQ,CAAC;UAC7BiB,gBAAgB,CAACD,OAAO,CAAChB,QAAQ,IAAI,CAAC,GAAG,MAAM,GAAGgB,OAAO,CAACE,MAAM,CAAC;QACrE;MACJ;IACJ,CAAC,CAAC;IACF,OAAO,YAAY;MACf,MAAML,SAAS,CAACC,OAAO,CAACK,SAAS,EAAE;MACnCN,SAAS,CAACC,OAAO,GAAG,IAAI;IAC5B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,aAAa,GAAG,YAAY;IAC9BnB,WAAW,CAAC,CAAC,CAAC;IACdgB,gBAAgB,CAAC,UAAU,CAAC;IAE5B,MAAMI,MAAM,GAAGR,SAAS,CAACC,OAAO;IAChC,MAAMO,MAAM,CAACC,IAAI,EAAE;IACnB,MAAMD,MAAM,CAACE,YAAY,CAAC,KAAK,CAAC;IAChC,MAAMF,MAAM,CAACG,UAAU,CAAC,KAAK,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMJ,MAAM,CAACK,SAAS,CAAC5B,SAAS,CAAC;IAClDK,YAAY,CAACsB,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC;IAEhCC,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;EAE1B,CAAC;AAEL,CAAC;AAAA,GA7CKlC,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}